{
  "import.testing-library": {
    "prefix": "itl",
    "description": "essential imports for testing-library",
    "body": "import { render, screen } from '@testing-library/${1|react,vue|}'$0"
  },
  "import.testing-library.react": {
    "prefix": "itr",
    "description": "essential imports for testing-library",
    "body": "import { render, screen } from '@testing-library/react'$0"
  },
  "import.testing-library.render-hook": {
    "prefix": "itrh",
    "description": "imports renderHook for testing-library",
    "body": "import { renderHook } from '@testing-library/react'$0"
  },
  "import.testing-library.user-event": {
    "prefix": "itue",
    "description": "imports user-event for testing-library",
    "body": "import userEvent from '@testing-library/user-event'$0"
  },
  "import.testing-library.vue": {
    "prefix": "itv",
    "description": "essential imports for testing-library",
    "body": "import { render, screen } from '@testing-library/vue'$0"
  },
  "query.TestId": {
    "prefix": "qid",
    "description": "TestId query",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}TestId($2)$0"
    ]
  },
  "query.TestId.full": {
    "prefix": "qidf",
    "description": "TestId query full string match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}TestId('${2:Text Match}')$0"
    ]
  },
  "query.TestId.substring": {
    "prefix": "qids",
    "description": "TestId query substring match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}TestId('${2:ext Matc}', {exact: false})$0"
    ]
  },
  "query.Title": {
    "prefix": "qtt",
    "description": "Title query",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Title($2)$0"
    ]
  },
  "query.Title.full": {
    "prefix": "qttf",
    "description": "Title query full string match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Title('${2:Text Match}')$0"
    ]
  },
  "query.Title.substring": {
    "prefix": "qtts",
    "description": "Title query substring match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Title('${2:ext Matc}', {exact: false})$0"
    ]
  },
  "query.altText": {
    "prefix": "qa",
    "description": "AltText query",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}AltText($2)$0"
    ]
  },
  "query.altText.full": {
    "prefix": "qaf",
    "description": "AltText query full string match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}AltText('${2:Text Match}')$0"
    ]
  },
  "query.altText.substring": {
    "prefix": "qas",
    "description": "AltText query substring match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}AltText('${2:ext Matc}', {exact: false})$0"
    ]
  },
  "query.displayValue": {
    "prefix": "qd",
    "description": "DisplayValue query",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}DisplayValue($2)$0"
    ]
  },
  "query.displayValue.full": {
    "prefix": "qdf",
    "description": "DisplayValue query full string match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}DisplayValue('${2:Text Match}')$0"
    ]
  },
  "query.displayValue.substring": {
    "prefix": "qds",
    "description": "DisplayValue query substring match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}DisplayValue('${2:ext Matc}', {exact: false})$0"
    ]
  },
  "query.label": {
    "prefix": "ql",
    "description": "LabelText query with options",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}LabelText(${2})$0"
    ]
  },
  "query.label.full": {
    "prefix": "qlf",
    "description": "LabelText query with options",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}LabelText('${2:Text Match}')$0"
    ]
  },
  "query.label.query": {
    "prefix": "qlq",
    "description": "LabelText query with a specific query selector",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}LabelText('${2:Text Match}', {selector: '${3:query}'})$0"
    ]
  },
  "query.label.substring": {
    "prefix": "qls",
    "description": "LabelText query substring match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}LabelText('${2:ext Matc}', {exact: false})$0"
    ]
  },
  "query.label.substring+query": {
    "prefix": "qlsq",
    "description": "LabelText query substring match with a specific query selector",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}LabelText('${2:ext Matc}', {exact: false, selector: '${3:query}'})$0"
    ]
  },
  "query.placeholder": {
    "prefix": "qp",
    "description": "PlaceholderText query",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}PlaceholderText($2)$0"
    ]
  },
  "query.placeholder.full": {
    "prefix": "qpf",
    "description": "PlaceholderText query full string match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}PlaceholderText('${2:Text Match}')$0"
    ]
  },
  "query.placeholder.substring": {
    "prefix": "qps",
    "description": "PlaceholderText query substring match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}PlaceholderText('${2:ext Matc}', {exact: false})$0"
    ]
  },
  "query.role": {
    "prefix": "qr",
    "description": "Role query",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Role('${2:id}')$0"
    ]
  },
  "query.role.checkbox": {
    "prefix": "qrc",
    "description": "Role checkbox",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Role('checkbox')$0"
    ]
  },
  "query.role.checkbox.checked": {
    "prefix": "qrcc",
    "description": "Role checkbox checked",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Role('checkbox', { checked: ${2|true,false|} })$0"
    ]
  },
  "query.role.heading": {
    "prefix": "qrh",
    "description": "Role heading",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Role('heading')$0"
    ]
  },
  "query.role.heading.level": {
    "prefix": "qrhl",
    "description": "Role heading level",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Role('heading', { level: ${2|1,2,3,4,5,6|} })$0"
    ]
  },
  "query.role.options": {
    "prefix": "qro",
    "description": "Role query with options",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Role('${2:id}', {$3})$0"
    ]
  },
  "query.role.options.name": {
    "prefix": "qron",
    "description": "Role query with name on options",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Role('${2:id}',\t{$3})$0"
    ]
  },
  "query.text": {
    "prefix": "qt",
    "description": "Text query",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text($2)$0"
    ]
  },
  "query.text.element.endWith": {
    "prefix": "qteew",
    "description": "Text query end with match on specific element",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text((content, element) => {",
      "\tconst tag = element.tagName.toLowerCase() === '${2:div}'",
      "\treturn tag && content.endsWith('${3:Match}')",
      "})"
    ]
  },
  "query.text.element.startWith": {
    "prefix": "qtesw",
    "description": "Text query start with match on specific element",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text((content, element) => {",
      "\tconst tag = element.tagName.toLowerCase() === '${2:div}'",
      "\treturn tag && content.startsWith('${3:Text}')",
      "})"
    ]
  },
  "query.text.endWith": {
    "prefix": "qtew",
    "description": "Text query end with match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text((content) => content.endsWith('${2:Match}'))$0"
    ]
  },
  "query.text.full": {
    "prefix": "qtf",
    "description": "Text query full string match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text('${2:Text Match}')$0"
    ]
  },
  "query.text.ignore": {
    "prefix": "qti",
    "description": "Text query full string ignore case",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text('${2:text match}', {ignore: false})$0"
    ]
  },
  "query.text.startWith": {
    "prefix": "qtsw",
    "description": "Text query start with match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text((content) => content.startsWith('${2:Text}'))$0"
    ]
  },
  "query.text.substring": {
    "prefix": "qts",
    "description": "Text query substring match",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text('${2:ext Matc}', {exact: false})$0"
    ]
  },
  "query.text.substring+ignore": {
    "prefix": "qtsi",
    "description": "Text query substring match ignore case",
    "body": [
      "screen.${1|getBy,getAllBy,queryBy,queryAllBy,findBy,findByAll|}Text('${2:ext matc}', {exact: false, ignore: false})$0"
    ]
  },
  "regex.end": {
    "prefix": "rew",
    "description": "regex end with string match",
    "body": [
      "/${1:Match}$/$0"
    ]
  },
  "regex.end+ignore": {
    "prefix": "rewi",
    "description": "regex end with string match and ignore case",
    "body": [
      "/${1:match}$/i$0"
    ]
  },
  "regex.full": {
    "prefix": "rf",
    "description": "regex full string match",
    "body": [
      "/^${1:Text Match}$/$0"
    ]
  },
  "regex.full+ignore": {
    "prefix": "rfi",
    "description": "regex full string match and ignore case",
    "body": [
      "/^${1:text match}$/i$0"
    ]
  },
  "regex.start": {
    "prefix": "rsw",
    "description": "regex start with string match",
    "body": [
      "/^${1:Text}/$0"
    ]
  },
  "regex.start+ignore": {
    "prefix": "rswi",
    "description": "regex start with string match and ignore case",
    "body": [
      "/^${1:text}/i$0"
    ]
  },
  "regex.substring": {
    "prefix": "rs",
    "description": "regex substring match",
    "body": [
      "/${1:ext Matc}/$0"
    ]
  },
  "regex.substring+ignore": {
    "prefix": "rsi",
    "description": "regex substring match and ignore case",
    "body": [
      "/${1:ext matc}/i$0"
    ]
  },
  "screen.debug": {
    "prefix": "sd",
    "description": "screen debug",
    "body": "screen.debug()$0"
  },
  "screen.log.testing-playground": {
    "prefix": "sltp",
    "description": "screen log testing playground url",
    "body": "screen.logTestingPlaygroundURL()$0"
  },
  "userEvent.beforeEach": {
    "prefix": "bees",
    "description": "beforeEach userEvent setup function is called once before each spec",
    "body": [
      "beforeEach(() => {",
      "\tuserEvent.setup()",
      "})$0"
    ]
  },
  "userEvent.clear": {
    "prefix": "ecl",
    "description": "userEvent to clear a field",
    "body": [
      "await userEvent.clear(${1:element})$0"
    ]
  },
  "userEvent.click": {
    "prefix": "ec",
    "description": "userEvent click",
    "body": [
      "await userEvent.click(${1:element})$0"
    ]
  },
  "userEvent.dblClick": {
    "prefix": "edc",
    "description": "userEvent dblClick",
    "body": [
      "await userEvent.dblClick(${1:element})$0"
    ]
  },
  "userEvent.deselectOptions": {
    "prefix": "edo",
    "description": "userEvent to deselect options",
    "body": [
      "await userEvent.deselectOptions(${1:listBoxElement}, ['value/label'])$0"
    ]
  },
  "userEvent.hover": {
    "prefix": "eh",
    "description": "userEvent hover",
    "body": [
      "await userEvent.hover(${1:element})$0"
    ]
  },
  "userEvent.paste": {
    "prefix": "ep",
    "description": "userEvent paste",
    "body": [
      "await userEvent.paste(${1:element}, '${2:text}')$0"
    ]
  },
  "userEvent.selectOptions": {
    "prefix": "eso",
    "description": "userEvent to select options",
    "body": [
      "await userEvent.selectOptions(${1:listBoxElement}, ['value/label'])$0"
    ]
  },
  "userEvent.setup": {
    "prefix": "es",
    "description": "userEvent setup function",
    "body": [
      "userEvent.setup()$0"
    ]
  },
  "userEvent.tab": {
    "prefix": "etb",
    "description": "userEvent tab",
    "body": [
      "await userEvent.tab()$0"
    ]
  },
  "userEvent.type": {
    "prefix": "et",
    "description": "userEvent type in a field",
    "body": [
      "await userEvent.type(${1:element}, '${2:text}')$0"
    ]
  },
  "userEvent.type+submit": {
    "prefix": "ets",
    "description": "userEvent type in a field and press enter to submit form",
    "body": [
      "await userEvent.type(${1:element}, `${2:text}{enter}`)$0"
    ]
  },
  "userEvent.unhover": {
    "prefix": "euh",
    "description": "userEvent unhover",
    "body": [
      "await userEvent.unhover(${1:element})$0"
    ]
  },
  "wait.for": {
    "prefix": "wf",
    "description": "wait for",
    "body": [
      "await waitFor(",
      "\t() => $1",
      ")$0"
    ]
  },
  "wait.for.removed": {
    "prefix": "wfr",
    "description": "wait for element to be removed",
    "body": [
      "await waitForElementToBeRemoved(",
      "\t() => $1",
      ")$0"
    ]
  }
}
